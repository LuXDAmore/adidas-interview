{"version":3,"sources":["components/Box/Box.js","pages/Play/Play.js"],"names":["Box","handleClick","props","onResult","isWinner","handleKeyPress","e","preventDefault","charCode","keyCode","type","className","aria-label","data-reveal","this","reveal","data-is-winner","style","backgroundColor","onClick","onKeyPress","React","Component","Play","state","played","winnerBox","createRef","handleCheating","current","handleResults","a","history","pathname","location","url","setState","message","title","text","icon","Swal","fire","timer","timerProgressBar","showCancelButton","showConfirmButton","push","boxes","level","columns","rows","hue","luminosity","saturation","numberOfBoxes","thebox","Math","floor","random","luxMax","luxMin","index","lux","key","ref","footer","gridTemplateColumns","gridTemplateRows"],"mappings":"6UAQqBA,G,mNAEjBC,YAAc,WAEqB,oBAAxB,EAAKC,MAAMC,UAA2B,EAAKD,MAAMC,SACpD,EAAKD,MAAME,W,EAKnBC,eAAiB,SAAAC,GAEbA,EAAEC,iBAEiB,KAAfD,EAAEE,UAAiC,KAAdF,EAAEG,SACvB,EAAKR,e,uDAMT,OACI,4BACIS,KAAK,SACLC,UAAU,MACVC,aAAW,WACXC,cAAcC,KAAKZ,MAAMa,OACzBC,iBAAiBF,KAAKZ,MAAME,SAC5Ba,MACI,CACIC,gBAAiBJ,KAAKZ,MAAMgB,iBAGpCC,QAAUL,KAAKb,YACfmB,WAAaN,KAAKT,qB,GAlCDgB,IAAMC,YCMlBC,G,mNAEjBC,MAAQ,CACJC,OAAQ,EAAKvB,MAAMuB,OACnBC,UAAWL,IAAMM,a,EAGrBC,eAAiB,WAEb,EAAKJ,MAAME,WAAa,EAAKF,MAAME,UAAUG,SAAW,EAAKL,MAAME,UAAUG,QAAQ5B,e,EAIzF6B,c,uCAAgB,WAAM1B,GAAN,uBAAA2B,EAAA,+DAKR,EAAK7B,MAFL8B,EAHQ,EAGRA,QACYC,EAJJ,EAIRC,SAAYD,SAGZE,EAAMF,GAER,EAAK/B,MAAMuB,QAAU,EAAKW,SACxB,CACIX,QAAQ,IAIVY,EAAUjC,EACV,CACEkC,MAAO,oBACPC,KAAM,yBACNC,KAAM,WAER,CACEF,MAAO,qBACPC,KAAM,4BACNC,KAAM,SAxBF,SA4BNC,IAAKC,KAAL,2BAEML,GAFN,IAGEM,MAAO,KACPC,kBAAkB,EAClBC,kBAAkB,EAClBC,mBAAmB,KAlCf,WAsCR1C,EAtCQ,sBAwCA6B,EAxCA,OAyCC,UAzCD,QA4CC,YA5CD,uCA0CAE,EAAM,WA1CN,oCA6CAA,EAAM,QA7CN,6BAiDAA,EAAM,UAjDN,gCAqDRA,EAAM,aArDE,QAuDZH,EAAQe,KACJZ,GAxDQ,4C,0HA6DiB,EAAXV,SAEHX,KAAKZ,MAAMuB,QAEtBX,KAAKsB,SACD,CACIX,OAAQX,KAAKZ,MAAMuB,W,+BAkC/B,IAvBM,IAAAuB,EAAQ,GAAR,EASElC,KAAKZ,MANL+C,EAHF,EAGEA,MACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,KACAC,EANF,EAMEA,IACAC,EAPF,EAOEA,WACAC,EARF,EAQEA,WAEFC,EAAgBL,EAAUC,EAC1BK,EAASC,KAAKC,MACZD,KAAKE,SAAWF,KAAKC,MACjBR,EAAUC,IAMhBS,EAASP,EAFKI,KAAKE,SAEiB,GACpCE,EAAS,EAAMR,EAFDI,KAAKE,SAEyB,GAGzCG,EAAQ,EAAGA,EAAQP,EAAeO,IAAW,CAElD,IAAM1D,EAAW0D,IAAUN,EACrBO,EACE3D,EACMyD,EACAD,EAER1C,EAAe,eAAYkC,EAAZ,eAAgC,IAANW,EAA1B,aAA2D,IAAbT,EAA9C,OAGrBN,EAAMD,KAEE,wBAAIiB,IAAG,UAAOf,EAAP,YAAkBa,IACrB,kBAAC,EAAD,CACI1D,SAAWA,EACXD,SAAWW,KAAKgB,cAChBZ,gBAAkBA,EAClBH,OAASD,KAAKU,MAAMC,OACpBwC,IAAM7D,EAAWU,KAAKU,MAAME,UAAY,SAQ5D,IAAMwC,EAASpD,KAAKZ,MAAMuB,OACpB,KAEE,gCACI,4BACIf,KAAK,SACLC,UAAU,0DACVQ,QAAUL,KAAKc,gBAEf,mDAQhB,OACI,6BAASjB,UAAU,aACf,gCACI,gDAEI,yBAAKA,UAAU,WACX,wCAAesC,MAI3B,wBACItC,UAAU,QACVM,MACI,CACIkD,oBAAoB,WAAD,OAAcjB,EAAd,WACnBkB,iBAAiB,WAAD,OAAcjB,EAAd,aAItBH,GAEJkB,O,GAnLgB7C,IAAMC","file":"static/js/4.f13e8959.chunk.js","sourcesContent":["// React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport './Style.scss';\n\n// Declaration\nexport default class Box extends React.Component {\n\n    handleClick = () => {\n\n        typeof this.props.onResult === 'function' && this.props.onResult(\n            this.props.isWinner\n        );\n\n    };\n\n    handleKeyPress = e => {\n\n        e.preventDefault();\n\n        if( e.charCode === 13 || e.keyCode === 13 )\n            this.handleClick();\n\n    };\n\n    render() {\n\n        return (\n            <button\n                type=\"button\"\n                className=\"box\"\n                aria-label=\"Click me\"\n                data-reveal={ this.props.reveal }\n                data-is-winner={ this.props.isWinner }\n                style={\n                    {\n                        backgroundColor: this.props.backgroundColor,\n                    }\n                }\n                onClick={ this.handleClick }\n                onKeyPress={ this.handleKeyPress }\n            />\n        );\n\n    }\n\n}\n\n// Validations\nBox.propTypes = {\n    backgroundColor: PropTypes.string,\n    reveal: PropTypes.bool,\n    onResult: PropTypes.func,\n    isWinner: PropTypes.bool,\n};\n","// React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Third parties\nimport Swal from 'sweetalert2';\n\n// Components\nimport Box from '../../components/Box/Box';\n\n// Style\nimport './Style.scss';\n\n// Declaration\nexport default class Play extends React.Component {\n\n    state = {\n        played: this.props.played,\n        winnerBox: React.createRef(),\n    };\n\n    handleCheating = () => {\n\n        this.state.winnerBox && this.state.winnerBox.current && this.state.winnerBox.current.handleClick();\n\n    };\n\n    handleResults = async isWinner => {\n\n        const {\n            history,\n            location: { pathname },\n        } = this.props;\n\n        let url = pathname;\n\n        ! this.props.played && this.setState(\n            {\n                played: true,\n            }\n        );\n\n        const message = isWinner\n            ? {\n                title: 'Yeah ðŸŽ‰',\n                text: 'Fly to the next level!',\n                icon: 'success',\n            }\n            : {\n                title: 'Ops.. ðŸ˜Ÿ',\n                text: 'You clicked the wrong box',\n                icon: 'error',\n            }\n        ;\n\n        await Swal.fire(\n            {\n                ... message,\n                timer: 6300,\n                timerProgressBar: true,\n                showCancelButton: false,\n                showConfirmButton: false,\n            }\n        );\n\n        if( isWinner ) {\n\n            switch( pathname ) {\n                case '/hard':\n                    url = '/you-win';\n                    break;\n                case '/medium':\n                    url = '/hard';\n                    break;\n                case '/easy':\n                default:\n                    url = '/medium';\n            }\n\n        } else\n            url = '/game-over';\n\n        history.push(\n            url\n        );\n\n    };\n\n    componentDidUpdate( { played } ) {\n\n        if( played !== this.props.played ) {\n\n            this.setState(\n                {\n                    played: this.props.played,\n                }\n            );\n\n        }\n\n    }\n\n    render() {\n\n        // Boxes\n        const boxes = []\n            // Data\n            , {\n                level,\n                columns,\n                rows,\n                hue,\n                luminosity,\n                saturation,\n            } = this.props\n            , numberOfBoxes = columns * rows\n            , thebox = Math.floor(\n                Math.random() * Math.floor(\n                    columns * rows\n                )\n            )\n            // Colors\n            , luxRangeMin = Math.random()\n            , luxRangeMax = Math.random()\n            , luxMax = luminosity * luxRangeMin * 0.6\n            , luxMin = 1 - ( luminosity * luxRangeMax ) * 0.6\n        ;\n\n        for( let index = 0; index < numberOfBoxes; index ++ ) {\n\n            const isWinner = index === thebox\n                , lux = (\n                    isWinner\n                        ? luxMin\n                        : luxMax\n                )\n                , backgroundColor = `hsl( ${ hue }deg ${ ( lux * 100 ) }% ${ ( saturation * 100 ) }% )`\n            ;\n\n            boxes.push(\n                (\n                    <li key={ `${ level }-${ index }` }>\n                        <Box\n                            isWinner={ isWinner }\n                            onResult={ this.handleResults }\n                            backgroundColor={ backgroundColor }\n                            reveal={ this.state.played }\n                            ref={ isWinner ? this.state.winnerBox : null }\n                        />\n                    </li>\n                )\n            );\n\n        }\n\n        const footer = this.props.played\n            ? null\n            : (\n                <footer>\n                    <button\n                        type=\"button\"\n                        className=\"btn btn--medium btn btn--border text--white bg--primary\"\n                        onClick={ this.handleCheating }\n                    >\n                        <strong>\n                            I&apos;M A CHEATER\n                        </strong>\n                    </button>\n                </footer>\n            )\n        ;\n\n        return (\n            <section className=\"page play\">\n                <header>\n                    <h3>\n                        [ Spot the tile ]\n                        <sup className=\"counter\">\n                            <small>level { level }</small>\n                        </sup>\n                    </h3>\n                </header>\n                <ul\n                    className=\"board\"\n                    style={\n                        {\n                            gridTemplateColumns: `repeat( ${ columns }, 1fr )`,\n                            gridTemplateRows: `repeat( ${ rows }, 1fr )`,\n                        }\n                    }\n                >\n                    { boxes }\n                </ul>\n                { footer }\n            </section>\n        );\n\n    }\n\n}\n\n// Validations\nPlay.propTypes = {\n    // Grid game\n    level: PropTypes.oneOfType(\n        [\n            PropTypes.string,\n            PropTypes.number,\n        ]\n    ),\n    columns: PropTypes.string,\n    rows: PropTypes.string,\n    played: PropTypes.bool,\n    // Colors\n    hue: PropTypes.number.isRequired,\n    luminosity: PropTypes.number.isRequired,\n    saturation: PropTypes.number.isRequired,\n    // Router\n    history: PropTypes.shape(\n        {\n            push: PropTypes.func.isRequired,\n        }\n    ),\n    location: PropTypes.shape(\n        {\n            pathname: PropTypes.string.isRequired,\n        }\n    ),\n};\n"],"sourceRoot":""}