{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js"],"names":["Home","React","lazy","GameOver","FourZeroFour","Win","Play","Scoreboard","AddToScoreboard","BackToHomeButton","App","state","availableColors","hue","luminosity","saturation","backgroundColor","handleShowSolution","setState","played","handleChangeComplete","rgb","r","g","b","hsl","h","l","s","handleRandomColor","Math","floor","random","Colors","window","console","info","basename","process","className","style","this","href","rel","target","title","exact","to","activeClassName","src","alt","path","Suspense","fallback","render","props","key","columns","rows","level","type","aria-pressed","onClick","circleSize","circleSpacing","colors","color","background","onChangeComplete","width","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","error","ReactDOM","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac559668.chunk.js","sourcesContent":["// React\r\nimport React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n} from 'react-router-dom';\r\n\r\n// Third parties\r\nimport { CirclePicker } from 'react-color';\r\nimport Colors from 'color-convert';\r\n\r\n// Styles\r\nimport './Style.scss';\r\n\r\n// Lazy\r\nconst Home = React.lazy(\r\n        () => import(\r\n            '../../pages/Home/Home'\r\n        )\r\n    )\r\n    , GameOver = React.lazy(\r\n        () => import(\r\n            '../../pages/GameOver/GameOver'\r\n        )\r\n    )\r\n    , FourZeroFour = React.lazy(\r\n        () => import(\r\n            '../../pages/FourZeroFour/FourZeroFour'\r\n        )\r\n    )\r\n    , Win = React.lazy(\r\n        () => import(\r\n            '../../pages/Win/Win'\r\n        )\r\n    )\r\n    , Play = React.lazy(\r\n        () => import(\r\n            '../../pages/Play/Play'\r\n        )\r\n    )\r\n    , Scoreboard = React.lazy(\r\n        () => import(\r\n            '../../pages/Scoreboard/Scoreboard'\r\n        )\r\n    )\r\n    // Components\r\n    , AddToScoreboard = React.lazy(\r\n        () => import(\r\n            '../AddToScoreboard/AddToScoreboard'\r\n        )\r\n    )\r\n    , BackToHomeButton = React.lazy(\r\n        () => import(\r\n            '../BackToHomeButton/BackToHomeButton'\r\n        )\r\n    )\r\n;\r\n\r\n// App\r\nexport default class App extends React.Component {\r\n\r\n    state = {\r\n        availableColors: [\r\n            '#f39c12',\r\n            '#2980b9',\r\n            '#10ac84',\r\n            '#bdc3c7',\r\n            '#34495e',\r\n        ],\r\n        hue: 165,\r\n        luminosity: 0.8,\r\n        saturation: 0.36,\r\n        backgroundColor: '#10ac84',\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n        window.console.info(\r\n            '%c Luca Iaconelli ',\r\n            'color: #fff; background-color: #333; padding: 4px 2px;',\r\n            'ðŸ¤˜ Ready to rock'\r\n        );\r\n\r\n    }\r\n\r\n    handleShowSolution = () => {\r\n\r\n        this.setState(\r\n            {\r\n                played: ! this.state.played,\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    handleChangeComplete = (\r\n        {\r\n            rgb: {\r\n                r,\r\n                g,\r\n                b,\r\n            },\r\n            hsl,\r\n        }\r\n    ) => {\r\n\r\n        this.setState(\r\n            {\r\n                hue: hsl.h,\r\n                luminosity: hsl.l,\r\n                saturation: hsl.s,\r\n                backgroundColor: `rgb(${ r }, ${ g }, ${ b })`,\r\n            }\r\n        );\r\n\r\n    };\r\n\r\n    handleRandomColor = () => {\r\n\r\n        const hsl = {\r\n                h: Math.floor(\r\n                    Math.random() * Math.floor(\r\n                        361\r\n                    )\r\n                ),\r\n                l: Math.random(),\r\n                s: Math.random(),\r\n            }\r\n            , [\r\n                r,\r\n                g,\r\n                b,\r\n            ] = Colors.rgb.hsl(\r\n                hsl.h,\r\n                hsl.l,\r\n                hsl.s\r\n            )\r\n        ;\r\n\r\n        this.handleChangeComplete(\r\n            {\r\n                hsl,\r\n                rgb: {\r\n                    r,\r\n                    g,\r\n                    b,\r\n                },\r\n            }\r\n        );\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const { PUBLIC_URL } = process.env;\r\n\r\n        return (\r\n            <Router basename={`${ PUBLIC_URL }/`}>\r\n                <div\r\n                    className=\"app container\"\r\n                    style={\r\n                        {\r\n                            backgroundColor: this.state.backgroundColor,\r\n                        }\r\n                    }>\r\n                    <header className=\"header\">\r\n\r\n                        <nav>\r\n                            <ul className=\"navigation\">\r\n                                <li className=\"navigation-item\">\r\n                                    <a href={ `${ PUBLIC_URL }/requirements/REACT-Challenge-eCom.pdf` } rel=\"noopener noreferrer\" target=\"_blank\" title=\"About\" className=\"btn btn--link\">\r\n                                        About\r\n                                    </a>\r\n                                </li>\r\n                                <li className=\"navigation-item\">\r\n                                    <NavLink exact to=\"/\" activeClassName=\"active\" title=\"Go to homepage\">\r\n                                        <img src={ `${ PUBLIC_URL }/imgs/logo.svg` } className=\"header__logo image\" alt=\"Adidas Logo\" />\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li className=\"navigation-item\">\r\n                                    <a href=\"https://github.com/LuXDAmore/adidas-interview\" rel=\"noopener noreferrer\" target=\"_blank\" title=\"Github\" className=\"btn btn--link\">\r\n                                        Github\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n\r\n                    </header>\r\n                    <main className=\"content\">\r\n\r\n                        <Switch>\r\n                            <Route exact path=\"/\">\r\n                                <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                    <Home />\r\n                                </React.Suspense>\r\n                            </Route>\r\n                            <Route\r\n                                exact\r\n                                path=\"/easy\"\r\n                                render={\r\n                                    props => (\r\n                                        <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                            <Play\r\n                                                key=\"easy\"\r\n                                                { ... props }\r\n                                                hue={ this.state.hue }\r\n                                                luminosity={ this.state.luminosity }\r\n                                                saturation={ this.state.saturation }\r\n                                                played={ this.state.played }\r\n                                                columns=\"3\"\r\n                                                rows=\"3\"\r\n                                                level=\"0\"\r\n                                            />\r\n                                        </React.Suspense>\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path=\"/medium\"\r\n                                render={\r\n                                    props => (\r\n                                        <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                            <Play\r\n                                                key=\"medium\"\r\n                                                { ... props }\r\n                                                hue={ this.state.hue }\r\n                                                luminosity={ this.state.luminosity }\r\n                                                saturation={ this.state.saturation }\r\n                                                played={ this.state.played }\r\n                                                columns=\"4\"\r\n                                                rows=\"4\"\r\n                                                level=\"1\"\r\n                                            />\r\n                                        </React.Suspense>\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path=\"/hard\"\r\n                                render={\r\n                                    props => (\r\n                                        <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                            <Play\r\n                                                key=\"hard\"\r\n                                                { ... props }\r\n                                                hue={ this.state.hue }\r\n                                                luminosity={ this.state.luminosity }\r\n                                                saturation={ this.state.saturation }\r\n                                                played={ this.state.played }\r\n                                                columns=\"5\"\r\n                                                rows=\"5\"\r\n                                                level=\"2\"\r\n                                            />\r\n                                        </React.Suspense>\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                path=\"/game-over/:points\"\r\n                                render={\r\n                                    props => (\r\n                                        <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                            <GameOver />\r\n                                            <AddToScoreboard { ... props } />\r\n                                            <BackToHomeButton />\r\n                                        </React.Suspense>\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                path=\"/you-win/:points\"\r\n                                render={\r\n                                    props => (\r\n                                        <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                            <Win />\r\n                                            <AddToScoreboard { ... props } />\r\n                                            <BackToHomeButton />\r\n                                        </React.Suspense>\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route path=\"/scoreboard\">\r\n                                <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                    <Scoreboard />\r\n                                    <BackToHomeButton />\r\n                                </React.Suspense>\r\n                            </Route>\r\n                            <Route path=\"*\">\r\n                                <React.Suspense fallback={<div className=\"loading spinner\" />}>\r\n                                    <FourZeroFour />\r\n                                    <BackToHomeButton />\r\n                                </React.Suspense>\r\n                            </Route>\r\n                        </Switch>\r\n\r\n                    </main>\r\n                    <footer className=\"footer\">\r\n\r\n                        <button\r\n                            type=\"button\"\r\n                            aria-pressed={ this.state.played }\r\n                            className=\"btn btn--small btn--border text--white\"\r\n                            onClick={ this.handleShowSolution }\r\n                        >\r\n                            Show solutions\r\n                        </button>\r\n\r\n                        <CirclePicker\r\n                            circleSize={ 16 }\r\n                            circleSpacing={ 8 }\r\n                            colors={ this.state.availableColors }\r\n                            color={ this.state.background }\r\n                            onChangeComplete={ this.handleChangeComplete }\r\n                            width=\"112px\"\r\n                        />\r\n\r\n                        <button type=\"button\" className=\"btn btn--small btn--border text--white\" onClick={ this.handleRandomColor }>\r\n                            Randomize!\r\n                        </button>\r\n\r\n                    </footer>\r\n                </div>\r\n            </Router>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}