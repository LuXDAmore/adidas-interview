{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","components/AddToScoreboard/AddToScoreboard.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","AddToScoreboard","state","handleSubmit","e","preventDefault","props","match","params","points","data","localStorage","getItem","p","parseInt","userData","JSON","parse","setItem","stringify","history","push","handleChange","setState","target","className","onSubmit","this","required","placeholder","name","autoComplete","onChange","type","disabled","React","Component"],"mappings":"kJAAe,SAASA,EAAgBC,EAAKC,EAAKC,GAYhD,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,EAZT,mC,mKCQqBQ,G,mNAEjBC,MAAQ,CACJP,MAAO,I,EAGXQ,aAAe,SAAAC,GAAM,IAAD,IAIhB,GAFAA,EAAEC,mBAEE,UAAE,EAAKC,MAAMC,aAAb,iBAAE,EAAkBC,cAApB,aAAE,EAA0BC,QAC5B,OAAO,EAEX,IAAMC,EAAOC,aAAaC,QAClB,gBAGFC,EAAIC,SACF,EAAKR,MAAMC,MAAMC,OAAOC,OACxB,IAEFM,EAAWL,EACPM,KAAKC,MACHP,GAFS,eAKP,EAAKR,MAAMP,MAAS,GAIlC,GAAIoB,EAAU,EAAKb,MAAMP,OAAU,CAE/B,IAAMc,EAASK,SACXC,EAAU,EAAKb,MAAMP,OACrB,IAGJoB,EAAU,EAAKb,MAAMP,OAAUc,EAASI,OAGxCE,EAAU,EAAKb,MAAMP,OAAUkB,EAanC,OAXAF,aAAaO,QACT,eACAF,KAAKG,UACDJ,IAIR,EAAKT,MAAMc,QAAQC,KACf,MAGG,G,EAIXC,aAAe,SAAAlB,GAEX,EAAKmB,SACD,CACI5B,MAAOS,EAAEoB,OAAO7B,S,uDAQxB,OACI,6BAAS8B,UAAU,qBACf,gCACI,4CACA,2BACI,4BACI,kEAIZ,0BAAMA,UAAU,OAAOC,SAAWC,KAAKxB,cACnC,kCACI,2BAAOyB,UAAQ,EAACC,YAAY,iBAAiBC,KAAK,WAAWC,aAAc,WAAWpC,MAAQgC,KAAKzB,MAAMP,MAAQqC,SAAWL,KAAKL,eACjI,4BAAQW,KAAK,SAASR,UAAU,iBAAiBS,UAAaP,KAAKzB,MAAMP,OAAzE,e,GAlFqBwC,IAAMC","file":"static/js/4.61e10a50.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","// React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport './Style.scss';\n\n// Component\nexport default class AddToScoreboard extends React.Component {\n\n    state = {\n        value: '',\n    };\n\n    handleSubmit = e => {\n\n        e.preventDefault();\n\n        if( ! this.props.match?.params?.points )\n            return false;\n\n        const data = localStorage.getItem(\n                'hall-of-fame'\n            )\n            // Points\n            , p = parseInt(\n                this.props.match.params.points,\n                10\n            )\n            , userData = data\n                ? JSON.parse(\n                    data\n                )\n                : {\n                    [ this.state.value ]: 0,\n                }\n        ;\n\n        if( userData[ this.state.value ] ) {\n\n            const points = parseInt(\n                userData[ this.state.value ],\n                10\n            );\n\n            userData[ this.state.value ] = points + p;\n\n        } else\n            userData[ this.state.value ] = p;\n\n        localStorage.setItem(\n            'hall-of-fame',\n            JSON.stringify(\n                userData\n            )\n        );\n\n        this.props.history.push(\n            '/'\n        );\n\n        return false;\n\n    };\n\n    handleChange = e => {\n\n        this.setState(\n            {\n                value: e.target.value,\n            }\n        );\n\n    };\n\n    render() {\n\n        return (\n            <section className=\"add-to-scoreboard\">\n                <header>\n                    <h5>HALL OF FAME</h5>\n                    <p>\n                        <em>\n                            <small>Write your name in the stars</small>\n                        </em>\n                    </p>\n                </header>\n                <form className=\"form\" onSubmit={ this.handleSubmit }>\n                    <fieldset>\n                        <input required placeholder=\"Luke Skywalker\" name=\"nickname\" autoComplete =\"nickname\" value={ this.state.value } onChange={ this.handleChange } />\n                        <button type=\"submit\" className=\"btn btn--large\" disabled={ ! this.state.value }>\n                            SEND\n                        </button>\n                    </fieldset>\n                </form>\n            </section>\n        );\n\n    }\n\n}\n\n// Validations\nAddToScoreboard.propTypes = {\n    // Router\n    history: PropTypes.shape(\n        {\n            push: PropTypes.func.isRequired,\n        }\n    ),\n    match: PropTypes.object,\n};\n"],"sourceRoot":""}